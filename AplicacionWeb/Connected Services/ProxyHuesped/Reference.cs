//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AplicacionWeb.ProxyHuesped {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProxyHuesped.IServiceHuesped")]
    public interface IServiceHuesped {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHuesped/contarHuespedesPorPais", ReplyAction="http://tempuri.org/IServiceHuesped/contarHuespedesPorPaisResponse")]
        AccesoServicios.ProxyHuesped.HuespedReporteBE[] contarHuespedesPorPais(System.DateTime fechaInicio, System.DateTime fechaFinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHuesped/contarHuespedesPorPais", ReplyAction="http://tempuri.org/IServiceHuesped/contarHuespedesPorPaisResponse")]
        System.Threading.Tasks.Task<AccesoServicios.ProxyHuesped.HuespedReporteBE[]> contarHuespedesPorPaisAsync(System.DateTime fechaInicio, System.DateTime fechaFinal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHuesped/obtenerDineroGastadoPorHuesped", ReplyAction="http://tempuri.org/IServiceHuesped/obtenerDineroGastadoPorHuespedResponse")]
        decimal obtenerDineroGastadoPorHuesped(System.DateTime fechaInicio, System.DateTime fechaFinal, string idTipoDoc, string numDoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHuesped/obtenerDineroGastadoPorHuesped", ReplyAction="http://tempuri.org/IServiceHuesped/obtenerDineroGastadoPorHuespedResponse")]
        System.Threading.Tasks.Task<decimal> obtenerDineroGastadoPorHuespedAsync(System.DateTime fechaInicio, System.DateTime fechaFinal, string idTipoDoc, string numDoc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHuesped/registrarHuesped", ReplyAction="http://tempuri.org/IServiceHuesped/registrarHuespedResponse")]
        bool registrarHuesped(AccesoServicios.ProxyHuesped.HuespedBE objHuespedBE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceHuesped/registrarHuesped", ReplyAction="http://tempuri.org/IServiceHuesped/registrarHuespedResponse")]
        System.Threading.Tasks.Task<bool> registrarHuespedAsync(AccesoServicios.ProxyHuesped.HuespedBE objHuespedBE);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceHuespedChannel : AplicacionWeb.ProxyHuesped.IServiceHuesped, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceHuespedClient : System.ServiceModel.ClientBase<AplicacionWeb.ProxyHuesped.IServiceHuesped>, AplicacionWeb.ProxyHuesped.IServiceHuesped {
        
        public ServiceHuespedClient() {
        }
        
        public ServiceHuespedClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceHuespedClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceHuespedClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceHuespedClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AccesoServicios.ProxyHuesped.HuespedReporteBE[] contarHuespedesPorPais(System.DateTime fechaInicio, System.DateTime fechaFinal) {
            return base.Channel.contarHuespedesPorPais(fechaInicio, fechaFinal);
        }
        
        public System.Threading.Tasks.Task<AccesoServicios.ProxyHuesped.HuespedReporteBE[]> contarHuespedesPorPaisAsync(System.DateTime fechaInicio, System.DateTime fechaFinal) {
            return base.Channel.contarHuespedesPorPaisAsync(fechaInicio, fechaFinal);
        }
        
        public decimal obtenerDineroGastadoPorHuesped(System.DateTime fechaInicio, System.DateTime fechaFinal, string idTipoDoc, string numDoc) {
            return base.Channel.obtenerDineroGastadoPorHuesped(fechaInicio, fechaFinal, idTipoDoc, numDoc);
        }
        
        public System.Threading.Tasks.Task<decimal> obtenerDineroGastadoPorHuespedAsync(System.DateTime fechaInicio, System.DateTime fechaFinal, string idTipoDoc, string numDoc) {
            return base.Channel.obtenerDineroGastadoPorHuespedAsync(fechaInicio, fechaFinal, idTipoDoc, numDoc);
        }
        
        public bool registrarHuesped(AccesoServicios.ProxyHuesped.HuespedBE objHuespedBE) {
            return base.Channel.registrarHuesped(objHuespedBE);
        }
        
        public System.Threading.Tasks.Task<bool> registrarHuespedAsync(AccesoServicios.ProxyHuesped.HuespedBE objHuespedBE) {
            return base.Channel.registrarHuespedAsync(objHuespedBE);
        }
    }
}
